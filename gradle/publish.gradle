apply plugin: 'maven-publish'

def getPublishProperty(String propertyName) {
    if (rootProject.hasProperty(propertyName)) {
        return rootProject.findProperty(propertyName)
    }
    return System.getenv(propertyName)
}

def getPublishVersion() {
    return getPublishProperty("version")
}

boolean isSnapshotVersion() {
    String version = getPublishVersion()
    logger.lifecycle "version: $version"
    return version != null && version.toUpperCase().contains("SNAPSHOT")
}

def getPublishGroupId() {
    def group = getPublishProperty("group")
    logger.lifecycle "group: $group"
    if (group) {
        return group
    }
    return 'io.github.hzhang'
}


def getPublishArtifactId() {
    return project.hasProperty("artifactId") ? project.getProperty("artifactId") : "rplugin"
}

def isNeedIncludeDeps() {
    return project.hasProperty("includeDeps") ? project.getProperty("includeDeps") as Boolean : true
}

def findDepArtifactId(String projName) {
    def depProj = rootProject.findProject(projName)
    return depProj != null && depProj.ext.has("artifactId") 
            ? depProj.ext.get("artifactId") : projName
}

def getArtifactTask() {
    return project.plugins.findPlugin('com.android.library') 
        ? (isSnapshotVersion() ? bundleDebugAar : bundleReleaseAar)
        : jar
}

def getDepArtifactVersion(String projName, String depVersion) {
    def depProj = rootProject.findProject(projName)
    return depProj != null ? depProj.version : depVersion
}

project.afterEvaluate {
    logger.lifecycle "publish task config: ${getPublishGroupId()}:${getPublishArtifactId()}:${getPublishVersion()}"

    tasks.create("source${name.capitalize()}Jar", Jar) {
        group = "publishing"
        description = "package ${name} source to jar"
        from "${project.projectDir}/src/main/java"
        from "${project.projectDir}/src/main/kotlin"
        destinationDir = file("$buildDir/libs/")
        classifier = 'sources'
    }

    publishing {
        publications {
            maven(MavenPublication) {
// logger.lifecycle "rootProject.artifactId: ${rootProject.artifactId}, project.property: ${project.artifactId}"
logger.lifecycle "project.property: ${project.artifactId}"
                groupId = getPublishGroupId()
                artifactId = getPublishArtifactId()
                version = getPublishVersion()
                artifact getArtifactTask()
                //artifact project.tasks.getByName("source${project.name.capitalize()}Jar")
                //artifact androidJavadocsJar
                //artifact androidSourcesJar

                pom {
                     name = "LinkRouter"
                     description = "An android component based architecture library"
                     url = "https://github.com/hbzhzw/LinkRouter"
                     licenses {
                          license {
                              name = "The Apache License, Version 2.0"
                              url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                          }
                     }
                     developers {
                          developer {
                              id = "hbzhzw"
                              name = "Zhang Hua"
                              email = "hbzhzw@qq.com"
                          }
                     }
                     scm {
                         connection = "https://github.com/hbzhzw/LinkRouter.git"
                         developerConnection = "https://github.com/hbzhzw/LinkRouter.git"
                         url = "https://github.com/hbzhzw/LinkRouter"
                     }
                }


                pom.withXml {
                    if (!isNeedIncludeDeps()) {
                        return
                    }
                    final dependenciesNode = asNode().appendNode('dependencies')
                    ext.addDependency = { dep, String scope ->
                        if (dep.group == null
                                || dep.version == null
                                || dep.name == null
                                || dep.name == "unspecified")
                            return // ignore invalid dependencies
                        println "dep: " + dep
                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', findDepArtifactId(dep.name))
                        dependencyNode.appendNode('version', getDepArtifactVersion(dep.name, dep.version))
                        dependencyNode.appendNode('scope', scope)
                        dep.artifacts.each { art ->
                            println "ext:    ${art.extension} - ${art.classifier}"
                            dependencyNode.appendNode('type', art.extension)
                            dependencyNode.appendNode('classifier', art.classifier)
                        }
                        if (!dep.transitive) {
                            // If this dependency is not transitive, we should force exclude all its dependencies from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionsNode = dependencyNode.appendNode('exclusions')
                            dep.properties.excludeRules.each { rule ->
                                final exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    if (configurations.getNames().contains("api")) {
                        configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    //if (configurations.getNames().contains("implementation")) {
                    //    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                    //}
                }
            }
        }

        repositories {
            maven {
                name = repo_name
                def releasesRepoUrl = repo_url
                def snapshotsRepoUrl = repo_snapshot_url
                url = isSnapshotVersion() ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username getPublishProperty("MAVEN_USER_NAME")
                    password getPublishProperty("MAVEN_USER_PWD")
                }

				logger.lifecycle "userName: ${credentials.username}, passwd: ${credentials.password}, url: ${url}"
                authentication{
                    basic(BasicAuthentication)
                }
            }
        }
    }
}
